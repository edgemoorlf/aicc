#!/usr/bin/env python3
"""
Aliyun CCC Consolidated Server - POC Implementation
Consolidates qwen/firefox client+server logic for telephony inbound calls

Key Features:
- Handles inbound CCC calls with auto-greeting
- G.711 ‚Üî PCM audio conversion for 8kHz telephony
- Persistent DashScope connections (ASR/LLM/TTS)
- In-memory session state (no concurrency)
- Professional debt collection conversation flow

Architecture:
Customer Calls ‚Üí CCC Inbound ‚Üí Function Compute ‚Üí Consolidated Server ‚Üí DashScope
"""

import os
import json
import time
import logging
import base64
import tempfile
import audioop
import asyncio
from typing import Dict, Optional, Any
from pathlib import Path

# Load environment variables from .env file
from dotenv import load_dotenv
load_dotenv()

# Aliyun CCC SDK
from alibabacloud_ccc20200701.client import Client as CccClient
from alibabacloud_ccc20200701 import models as ccc_models
from alibabacloud_tea_openapi import models as open_api_models

# DashScope imports
import dashscope
from dashscope.audio.asr import Recognition, RecognitionCallback, RecognitionResult
from dashscope import Generation
import dashscope.audio.qwen_tts

# Configuration
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('ccc_consolidated_server.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Environment variables (loaded from .env file)
DASHSCOPE_API_KEY = os.getenv('DASHSCOPE_API_KEY')
ALIYUN_ACCESS_KEY_ID = os.getenv('ALIYUN_ACCESS_KEY_ID')
ALIYUN_ACCESS_KEY_SECRET = os.getenv('ALIYUN_ACCESS_KEY_SECRET')
ALIYUN_CCC_INSTANCE_ID = os.getenv('ALIYUN_CCC_INSTANCE_ID')
ALIYUN_REGION = os.getenv('ALIYUN_REGION', 'cn-shanghai')

# Validate configuration
if not DASHSCOPE_API_KEY:
    logger.error('‚ùå DASHSCOPE_API_KEY not found in environment variables')
    raise ValueError('Please set DASHSCOPE_API_KEY in .env file')

if not ALIYUN_ACCESS_KEY_ID or not ALIYUN_ACCESS_KEY_SECRET:
    logger.error('‚ùå Aliyun access keys not found in environment variables')
    raise ValueError('Please set ALIYUN_ACCESS_KEY_ID and ALIYUN_ACCESS_KEY_SECRET in .env file')

# Configure DashScope API
dashscope.api_key = DASHSCOPE_API_KEY
logger.info("‚úÖ DashScope API configured for CCC telephony integration")
logger.info(f"‚úÖ Environment loaded: DashScope key configured, Aliyun region: {ALIYUN_REGION}")

# Global persistent connections and state
asr_session = None
llm_client = None
tts_client = None
conversation_sessions = {}  # In-memory session storage (no concurrency)

# Voice settings for professional collection agent
voice_settings = {
    'speed': 1.0,
    'pitch': 1.0, 
    'volume': 0.8,
    'voice': 'Cherry',
    'tone': 'professional',
    'emotion': 'professional'
}

class TelephonyASRProcessor:
    """Telephony ASR Processor - Adapted from FirefoxStreamingASRSession"""
    
    def __init__(self, call_id: str):
        self.call_id = call_id
        self.recognition = None
        self.is_active = False
        self.start_time = None
        
        # Sentence completion detection
        self.last_partial_text = ""
        self.last_update_time = 0
        self.sentence_timeout = 2000  # 2s timeout for sentence completion
        self.pending_final_check = None
        
        # Connection management
        self.consecutive_failures = 0
        self.max_consecutive_failures = 3
        self.last_restart_time = 0
        self.restart_cooldown = 5.0
        
        # ASR latency measurement
        self.sentence_end_time = None
        self.last_audio_time = None
        
    def start_telephony_asr(self):
        """Start telephony ASR with 8kHz PCM support"""
        try:
            logger.info(f'üìû Starting telephony ASR session: {self.call_id}')
            
            # Create callback instance
            callback = TelephonyASRCallback(self)
            
            # Create Recognition instance for telephony (8kHz PCM)
            self.recognition = Recognition(
                model="paraformer-realtime-v2",  # Supports any sampling rate
                format="wav",  # PCM WAV format from G.711 conversion
                sample_rate=8000,  # CCC telephony standard 8kHz
                callback=callback,
                # Telephony optimization parameters
                semantic_punctuation_enabled=True,
                max_sentence_silence=1500,  # 1.5s for phone conversations
                heartbeat=True,
                multi_threshold_mode_enabled=True
            )
            
            # Start recognition
            self.recognition.start()
            self.is_active = True
            self.start_time = time.time()
            
            logger.info(f'‚úÖ Telephony ASR started: {self.call_id} (8kHz PCM)')
            return True
            
        except Exception as e:
            logger.error(f'‚ùå Telephony ASR startup failed: {e}')
            self.is_active = False
            self.recognition = None
            return False
    
    def send_audio_data(self, g711_audio_data: bytes) -> bool:
        """Send G.711 audio data to ASR (convert to PCM first)"""
        try:
            # Convert G.711 to PCM WAV (8kHz)
            pcm_data = g711_to_wav_8khz(g711_audio_data)
            
            if not self.recognition or not self.is_active:
                if not self.restart_telephony_asr():
                    return False
                    
            # Record audio receive time for latency calculation
            self.last_audio_time = time.time()
            
            # Send PCM data to DashScope ASR
            self.recognition.send_audio_frame(pcm_data)
            
            logger.debug(f'üì§ Telephony audio processed: {len(g711_audio_data)} G.711 ‚Üí {len(pcm_data)} PCM')
            return True
            
        except Exception as e:
            logger.error(f'‚ùå Telephony audio processing failed: {e}')
            self.consecutive_failures += 1
            self.last_restart_time = time.time()
            
            if self.recognition:
                try:
                    self.recognition.stop()
                except:
                    pass
                self.recognition = None
                self.is_active = False
            return False
    
    def restart_telephony_asr(self):
        """Restart telephony ASR with backoff"""
        try:
            current_time = time.time()
            if current_time - self.last_restart_time < self.restart_cooldown:
                logger.warning(f'ASR restart cooldown: {self.restart_cooldown - (current_time - self.last_restart_time):.1f}s remaining')
                return False
                
            if self.consecutive_failures >= self.max_consecutive_failures:
                logger.error(f'Max ASR failures reached: {self.max_consecutive_failures}')
                return False
            
            # Clean up existing connection
            if self.recognition:
                try:
                    self.recognition.stop()
                except:
                    pass
                self.recognition = None
                self.is_active = False
            
            time.sleep(2.0)  # Allow DashScope cleanup
            logger.info(f'üîÑ Restarting telephony ASR: {self.call_id}')
            
            return self.start_telephony_asr()
            
        except Exception as e:
            logger.error(f'‚ùå Telephony ASR restart failed: {e}')
            return False
    
    def stop_telephony_asr(self):
        """Stop telephony ASR"""
        try:
            if self.recognition and self.is_active:
                self.recognition.stop()
                self.is_active = False
                logger.info(f'üõë Telephony ASR stopped: {self.call_id}')
        except Exception as e:
            logger.error(f'‚ùå Stop ASR failed: {e}')

class TelephonyASRCallback(RecognitionCallback):
    """Telephony ASR Callback - Adapted from FirefoxASRCallback"""
    
    def __init__(self, asr_processor):
        self.asr_processor = asr_processor
        self.recognition_start_time = None
        
    def on_open(self):
        self.recognition_start_time = time.time()
        logger.info(f"‚úÖ Telephony ASR connection established: {self.asr_processor.call_id}")
        
    def on_event(self, result):
        if isinstance(result, RecognitionResult):
            sentence = result.get_sentence()
            
            if sentence:
                text = sentence.get('text', '')
                confidence = sentence.get('confidence', 0.8)  # Default confidence
                is_sentence_end = sentence.get('sentence_end', False) or sentence.get('is_final', False)
                
                # Calculate ASR latency
                current_time = time.time()
                asr_latency = 200  # Default latency
                if is_sentence_end and self.asr_processor.last_audio_time:
                    asr_latency = (current_time - self.asr_processor.last_audio_time) * 1000
                    asr_latency = max(50, min(asr_latency, 3000))  # 50ms-3s range
                
                logger.info(f"üìû Telephony ASR result: '{text}' (confidence: {confidence:.2f}, latency: {asr_latency:.1f}ms, final: {is_sentence_end})")
                
                # Process complete sentences for LLM
                if text.strip() and confidence > 0.3 and is_sentence_end:
                    logger.info(f'üéØ Complete sentence recognized: {text}')
                    # Trigger LLM processing through conversation handler
                    handle_customer_speech(self.asr_processor.call_id, text)
                    
    def on_error(self, error):
        logger.error(f"‚ùå Telephony ASR error: {error}")
        
    def on_close(self):
        logger.info(f"üîí Telephony ASR connection closed: {self.asr_processor.call_id}")

def g711_to_wav_8khz(g711_data: bytes) -> bytes:
    """Convert G.711 (A-law/Œº-law) to 8kHz PCM WAV for DashScope ASR"""
    try:
        # Detect G.711 format (A-law vs Œº-law)
        # For CCC, typically A-law for international, Œº-law for North America
        # We'll try A-law first, then Œº-law as fallback
        
        try:
            # Try A-law decoding first (international standard)
            pcm_16bit = audioop.alaw2lin(g711_data, 2)  # 2 bytes = 16-bit samples
            conversion_type = "A-law"
        except audioop.error:
            try:
                # Fallback to Œº-law decoding (North America standard)
                pcm_16bit = audioop.ulaw2lin(g711_data, 2)  # 2 bytes = 16-bit samples
                conversion_type = "Œº-law"
            except audioop.error:
                logger.error('‚ùå G.711 data is neither valid A-law nor Œº-law')
                return b''
        
        # Create WAV header for 8kHz, 16-bit, mono PCM
        wav_header = create_wav_header(len(pcm_16bit), sample_rate=8000, channels=1, bits_per_sample=16)
        wav_data = wav_header + pcm_16bit
        
        logger.debug(f'üîÑ G.711 conversion: {len(g711_data)} bytes {conversion_type} ‚Üí {len(pcm_16bit)} bytes PCM ‚Üí {len(wav_data)} bytes WAV (8kHz, 16-bit, mono)')
        return wav_data
        
    except Exception as e:
        logger.error(f'‚ùå G.711 to WAV conversion failed: {e}')
        return b''

def pcm_24khz_to_g711_8khz(pcm_data: bytes) -> bytes:
    """Downsample 24kHz PCM to 8kHz G.711 for CCC telephony output"""
    try:
        # Step 1: Resample 24kHz ‚Üí 8kHz (3:1 ratio)
        # audioop.ratecv(fragment, width, nchannels, inrate, outrate, state, weightA, weightB)
        downsampled_pcm, _ = audioop.ratecv(
            pcm_data,      # Input PCM data
            2,             # Sample width (16-bit = 2 bytes)
            1,             # Mono (1 channel)
            24000,         # Input sample rate
            8000,          # Output sample rate (CCC telephony standard)
            None           # State (None for first call)
        )
        
        # Step 2: Convert 16-bit PCM to G.711 A-law (international standard)
        g711_alaw = audioop.lin2alaw(downsampled_pcm, 2)  # 2 = 16-bit input
        
        logger.debug(f'üîÑ PCM to G.711 conversion: {len(pcm_data)} bytes 24kHz PCM ‚Üí {len(downsampled_pcm)} bytes 8kHz PCM ‚Üí {len(g711_alaw)} bytes A-law')
        return g711_alaw
        
    except Exception as e:
        logger.error(f'‚ùå PCM to G.711 conversion failed: {e}')
        return b''

def create_wav_header(data_length: int, sample_rate: int = 8000, channels: int = 1, bits_per_sample: int = 16) -> bytes:
    """Create WAV file header for PCM data"""
    byte_rate = sample_rate * channels * bits_per_sample // 8
    block_align = channels * bits_per_sample // 8
    
    header = b'RIFF'                                    # Chunk ID
    header += (36 + data_length).to_bytes(4, 'little') # Chunk size
    header += b'WAVE'                                   # Format
    header += b'fmt '                                   # Subchunk1 ID
    header += (16).to_bytes(4, 'little')               # Subchunk1 size
    header += (1).to_bytes(2, 'little')                # Audio format (PCM)
    header += channels.to_bytes(2, 'little')           # Channels
    header += sample_rate.to_bytes(4, 'little')        # Sample rate
    header += byte_rate.to_bytes(4, 'little')          # Byte rate
    header += block_align.to_bytes(2, 'little')        # Block align
    header += bits_per_sample.to_bytes(2, 'little')    # Bits per sample
    header += b'data'                                   # Subchunk2 ID
    header += data_length.to_bytes(4, 'little')        # Subchunk2 size
    
    return header

def initialize_persistent_connections():
    """Initialize and maintain persistent DashScope connections"""
    global asr_session, llm_client, tts_client
    
    try:
        logger.info('üî• Initializing persistent DashScope connections...')
        
        # Pre-configure LLM client
        llm_client = Generation
        logger.info('‚úÖ LLM client ready')
        
        # Pre-configure TTS client  
        tts_client = dashscope.audio.qwen_tts.SpeechSynthesizer
        logger.info('‚úÖ TTS client ready')
        
        logger.info('üöÄ All persistent connections initialized')
        return True
        
    except Exception as e:
        logger.error(f'‚ùå Persistent connection initialization failed: {e}')
        return False

def build_collection_prompt(customer_context: Dict, conversation_history: list) -> str:
    """Build professional collection agent prompt - Telephony version"""
    
    def format_chinese_amount(amount: int) -> str:
        """Format amount in Chinese: 15000 ‚Üí ‰∏Ä‰∏á‰∫îÂçÉÂÖÉ"""
        if amount >= 10000:
            wan = amount // 10000
            remainder = amount % 10000
            if remainder == 0:
                return f"{wan}‰∏áÂÖÉ"
            else:
                return f"{wan}‰∏á{remainder}ÂÖÉ"
        return f"{amount}ÂÖÉ"
    
    # Build conversation history
    conversation_text = ""
    if conversation_history:
        conversation_text = "\nÊú¨Ê¨°ÈÄöËØùËÆ∞ÂΩï:\n"
        for i, entry in enumerate(conversation_history):
            role = "ÂÆ¢Êà∑" if entry.get('sender') == 'customer' else "ÂÇ¨Êî∂Âëò"
            conversation_text += f"{i+1}. {role}: {entry.get('text', '')}\n"
    else:
        conversation_text = "\nÊú¨Ê¨°ÈÄöËØùËÆ∞ÂΩï:\n(ÂºÄÂßãÊñ∞ÂØπËØù)\n"
    
    system_prompt = f"""‰Ω†ÊòØÂπ≥ÂÆâÈì∂Ë°å‰ø°Áî®Âç°‰∏≠ÂøÉÁöÑ‰∏ì‰∏öÂÇ¨Êî∂‰∏ìÂëòÔºåÊ≠£Âú®ËøõË°åÁîµËØùÂÇ¨Êî∂Â∑•‰Ωú„ÄÇ

ÂÆ¢Êà∑Ê°£Ê°à‰ø°ÊÅØ:
- ÂÆ¢Êà∑ÂßìÂêç: {customer_context.get('name', 'ÂÆ¢Êà∑')}
- ÈÄæÊúüÊú¨Èáë: {format_chinese_amount(customer_context.get('balance', 15000))}
- ÈÄæÊúüÂ§©Êï∞: {customer_context.get('daysOverdue', 30)}Â§©
- ËÅîÁ≥ªÂéÜÂè≤: {customer_context.get('previousContacts', 2)}Ê¨°
- È£éÈô©Á≠âÁ∫ß: {customer_context.get('riskLevel', '‰∏≠Á≠â')}

{conversation_text}

Âü∫‰∫éÁúüÂÆûÂÇ¨Êî∂ÂØπËØùÁöÑÊ†áÂáÜËØùÊúØ:

„ÄêÊ†∏ÂÆûÁ°ÆËÆ§„Äë
- "ÊàëÁúãÊÇ®ËøôËæπÁöÑËØùÂú®[Êó•Êúü]Ëøò‰∫Ü‰∏ÄÁ¨îÔºåËøò‰∫Ü[ÈáëÈ¢ù]"
- "ÂΩìÂâçÁöÑËØùËøòÂ∑Æ[ÂÖ∑‰ΩìÈáëÈ¢ù]ÔºåÊ≤°ÊúâËøòÂ§ü"

„ÄêÁêÜËß£ÂõûÂ∫î„Äë  
- "‰πüÊ≤°Êúâ‰∫∫ËØ¥ÊúâÈí±‰∏çÂéªËøòËøô‰∏™‰ø°Áî®Âç°ÁöÑÔºåÊàëÂèØ‰ª•ÁêÜËß£"
- "ÂèØ‰ª•ÁêÜËß£ÔºåÊÇ®ÁöÑËøòÊ¨æÂéãÂäõÁ°ÆÂÆû‰πüÊòØÊå∫Â§ßÁöÑ"

„ÄêÊñπÊ°àÊèê‰æõ„Äë
- "ÂΩìÂâçÁöÑËØùËøòÊòØÂ±û‰∫é‰∏Ä‰∏™ÂÜÖÈÉ®ÂçèÂïÜ"
- "Èì∂Ë°åËøôËæπÂèØ‰ª•Â∏ÆÊÇ®ÂáèÂÖç‰∏ÄÈÉ®ÂàÜÊÅØË¥π"
- "ËøòÂèØ‰ª•Â∏ÆÊÇ®ÂéªÊí§ÈîÄËøô‰∏™‰ΩôËñ™Ê°à‰ª∂ÁöÑ"

„Äê‰∏ì‰∏öÁî®ËØ≠„Äë
- ‰ΩøÁî®"ÊÇ®ËøôËæπÁöÑËØù"„ÄÅ"ÂΩìÂâçÁöÑËØù"„ÄÅ"ÊòØÂêß"Á≠âÁúüÂÆûÂÇ¨Êî∂Áî®ËØ≠
- ‰ΩøÁî®"ÂÜÖÈÉ®ÂçèÂïÜ"„ÄÅ"‰ΩôËñ™Ê°à‰ª∂"„ÄÅ"ÂÖ®È¢ùÂáèÂÖçÊñπÊ°àÊîøÁ≠ñ"Á≠â‰∏ì‰∏öÊúØËØ≠

„ÄêÈáçË¶ÅÂéüÂàô„Äë
1. ‰øùÊåÅÁêÜËß£ËÄêÂøÉÁöÑÊÄÅÂ∫¶ÔºåÈÅøÂÖçÂº∫Á°¨ÊñΩÂéã
2. Áî®ÂÖ∑‰ΩìÊï∞ÊçÆÂª∫Á´ãÂèØ‰ø°Â∫¶  
3. Êèê‰æõÂ§öÁßçËß£ÂÜ≥ÊñπÊ°à
4. ÂÖ≥Ê≥®ÂÆ¢Êà∑ÊÑüÂèóÂíåÂÆûÈôÖÂõ∞Èöæ
5. ‰ΩøÁî®Èì∂Ë°å‰∏ì‰∏öÊúØËØ≠Â¢ûÂº∫ÊùÉÂ®ÅÊÄß
6. ÊØè‰∏ÄÊ¨°ÂõûÁ≠îÂ∞ΩÈáèÁÆÄÁªÉÔºå‰∏çË¶ÅË∂ÖËøá4Âè•ËØùÔºåÊúÄÂ•ΩÂú®1-2Âè•ÔºåÈÅøÂÖçÈïøÁØáÂ§ßËÆ∫ÔºåÁ°Æ‰øùÂÆ¢Êà∑ËÉΩÂê¨ÊáÇ
7. **‰∏•Á¶ÅÈáçÂ§ç‰πãÂâçÂ∑≤ÁªèËØ¥ËøáÁöÑÂÜÖÂÆπ** - ‰ªîÁªÜÊü•ÁúãÈÄöËØùËÆ∞ÂΩïÔºåÈÅøÂÖçÈáçÂ§çÁõ∏ÂêåÁöÑËØùÊúØ„ÄÅÈóÆÈ¢òÊàñ‰ø°ÊÅØ
8. **Ê†πÊçÆÂØπËØùËøõÂ±ïË∞ÉÊï¥Á≠ñÁï•** - ÊØèÊ¨°ÂõûÂ§çÈÉΩË¶ÅÂü∫‰∫éÂÆ¢Êà∑ÁöÑÊúÄÊñ∞ÂõûÂ∫îÔºåÊé®ËøõÂØπËØùËÄå‰∏çÊòØÈáçÂ§ç

ËØ≠Ë®ÄË¶ÅÊ±Ç:
- ‰ΩøÁî®Â§ßÈôÜÊ†áÂáÜÊôÆÈÄöËØùÔºåÈÅøÂÖçÂè∞ÊπæÁî®ËØ≠
- ÈáëÈ¢ùË°®Ëææ: 15000ÂÖÉËØ¥Êàê"‰∏Ä‰∏á‰∫îÂçÉÂÖÉ"Ôºå‰∏çÊòØ"ÂçÅ‰∫îÂçÉÂÖÉ"
- ËØ≠Ê∞îË¶Å‰∏ì‰∏ö„ÄÅÁêÜËß£Ôºå‰ΩìÁé∞‰∫∫ÊñáÂÖ≥ÊÄÄ

ËØ∑‰ª•‰∏ì‰∏öÂÇ¨Êî∂ÂëòÁöÑË∫´‰ªΩÔºåÈíàÂØπÂÆ¢Êà∑ÁöÑËØùËØ≠ÁªôÂá∫ÂêàÈÄÇÁöÑÂõûÂ∫îÔºåÊé®ËøõÂÇ¨Êî∂ÂØπËØù„ÄÇ"""

    return system_prompt

def process_telephony_llm_and_tts(call_id: str, user_text: str):
    """Process customer speech through LLM and generate TTS response"""
    try:
        logger.info(f'üí¨ Processing customer speech: "{user_text}" (call: {call_id})')
        llm_start = time.time()
        
        # Get session context
        session = conversation_sessions.get(call_id, {})
        customer_context = session.get('customer_context', {
            'name': 'ÂÆ¢Êà∑',
            'balance': 15000,
            'daysOverdue': 30,
            'previousContacts': 2,
            'riskLevel': '‰∏≠Á≠â'
        })
        
        conversation_history = session.get('history', [])
        
        # Build collection prompt
        system_prompt = build_collection_prompt(customer_context, conversation_history)
        
        logger.info('üß† Calling Qwen LLM...')
        response = llm_client.call(
            model='qwen-turbo-latest',
            messages=[
                {'role': 'system', 'content': system_prompt},
                {'role': 'user', 'content': user_text}
            ],
            temperature=0.7,
            max_tokens=500,
            result_format='message'
        )
        
        llm_latency = (time.time() - llm_start) * 1000
        
        if response.status_code == 200:
            ai_response = response.output.choices[0].message.content
            logger.info(f"üí¨ LLM response: '{ai_response}' (latency: {llm_latency:.1f}ms)")
            
            # Update conversation history
            session['history'].extend([
                {'sender': 'customer', 'text': user_text, 'timestamp': time.time()},
                {'sender': 'agent', 'text': ai_response, 'timestamp': time.time()}
            ])
            conversation_sessions[call_id] = session
            
            # Generate TTS audio
            generate_telephony_tts(call_id, ai_response)
            
        else:
            logger.error(f"‚ùå LLM call failed: status={response.status_code}")
            
    except Exception as e:
        logger.error(f"‚ùå LLM processing failed: {e}")
        import traceback
        traceback.print_exc()

def generate_telephony_tts(call_id: str, text: str):
    """Generate streaming TTS audio for telephony output"""
    try:
        logger.info(f'üéµ Generating telephony TTS: "{text}" (call: {call_id})')
        tts_start = time.time()
        
        # TTS parameters for telephony
        tts_params = {
            "model": "qwen-tts-latest",
            "text": text,
            "voice": voice_settings.get('voice', 'Cherry'),
            "stream": True,
            "format": "pcm",
            "sample_rate": 24000  # Will be downsampled to 8kHz for CCC
        }
        
        # Apply voice control parameters
        for param in ['speed', 'pitch', 'volume', 'tone', 'emotion']:
            if param in voice_settings and voice_settings[param] != 'neutral':
                tts_params[param] = voice_settings[param]
        
        logger.info(f'üéµ TTS parameters: {tts_params}')
        
        # Generate streaming TTS
        responses = tts_client.call(**tts_params)
        
        if responses is None:
            raise ValueError("TTS API returned None response")
        
        # Process streaming PCM chunks
        chunk_count = 0
        first_chunk_latency = None
        
        for response in responses:
            if response and "output" in response and "audio" in response["output"] and "data" in response["output"]["audio"]:
                audio_string = response["output"]["audio"]["data"]
                pcm_bytes = base64.b64decode(audio_string)
                
                if pcm_bytes:
                    if first_chunk_latency is None:
                        first_chunk_latency = (time.time() - tts_start) * 1000
                        logger.info(f'üéµ First PCM chunk latency: {first_chunk_latency:.1f}ms')
                    
                    # Convert 24kHz PCM to 8kHz G.711 for CCC output
                    g711_audio = pcm_24khz_to_g711_8khz(pcm_bytes)
                    
                    # Send to CCC (placeholder - need actual CCC audio output)
                    send_audio_to_ccc(call_id, g711_audio)
                    
                    chunk_count += 1
                    logger.debug(f'üì§ Telephony TTS chunk {chunk_count}: {len(pcm_bytes)} PCM ‚Üí {len(g711_audio)} G.711')
            elif response.status_code != 200:
                logger.error(f"‚ùå TTS streaming error: {response.status_code}")
                break
        
        total_time = (time.time() - tts_start) * 1000
        effective_latency = first_chunk_latency if first_chunk_latency else 2000
        
        logger.info(f'‚úÖ Telephony TTS completed: {chunk_count} chunks, first chunk: {effective_latency:.1f}ms, total: {total_time:.1f}ms')
        
    except Exception as e:
        logger.error(f'‚ùå Telephony TTS generation failed: {e}')
        import traceback
        traceback.print_exc()

def send_audio_to_ccc(call_id: str, g711_audio: bytes):
    """Send G.711 audio to CCC for customer playback"""
    try:
        # TODO: Implement actual CCC audio output
        # This would use CCC SDK to send audio back to the customer
        logger.debug(f'üìû Sending {len(g711_audio)} bytes G.711 audio to CCC call: {call_id}')
        
        # Placeholder for CCC audio output API call
        # Real implementation would use CCC client to send audio to call
        
    except Exception as e:
        logger.error(f'‚ùå CCC audio output failed: {e}')

def handle_inbound_call(call_event: Dict) -> Dict:
    """Handle CCC inbound call event - Main entry point"""
    try:
        call_id = call_event.get('call_id')
        customer_phone = call_event.get('customer_phone', 'unknown')
        
        logger.info(f'üìû Handling inbound call: {call_id} from {customer_phone}')
        
        # Initialize session in memory
        conversation_sessions[call_id] = {
            'history': [],
            'customer_context': {
                'name': 'ÂÆ¢Êà∑',  # Could extract from CRM based on phone number
                'balance': 15000,
                'daysOverdue': 30,
                'previousContacts': 2,
                'riskLevel': '‰∏≠Á≠â'
            },
            'start_time': time.time(),
            'asr_processor': None
        }
        
        # Initialize ASR processor for this call
        asr_processor = TelephonyASRProcessor(call_id)
        if asr_processor.start_telephony_asr():
            conversation_sessions[call_id]['asr_processor'] = asr_processor
            logger.info(f'‚úÖ ASR processor started for call: {call_id}')
        else:
            logger.error(f'‚ùå Failed to start ASR for call: {call_id}')
            return {'status': 'error', 'message': 'ASR initialization failed'}
        
        # Play greeting immediately upon connection
        play_inbound_greeting(call_id)
        
        return {
            'status': 'success', 
            'message': f'Inbound call {call_id} handled successfully',
            'call_id': call_id
        }
        
    except Exception as e:
        logger.error(f'‚ùå Inbound call handling failed: {e}')
        return {'status': 'error', 'message': str(e)}

def play_inbound_greeting(call_id: str):
    """Play greeting upon inbound call connection - Adapted from continueGreetingSequence"""
    try:
        session = conversation_sessions.get(call_id, {})
        customer_context = session.get('customer_context', {})
        
        # Construct complete greeting message
        customer_name = customer_context.get('name', 'ÂÆ¢Êà∑')
        balance = customer_context.get('balance', 15000)
        days_overdue = customer_context.get('daysOverdue', 30)
        
        def format_chinese_amount(amount: int) -> str:
            if amount >= 10000:
                wan = amount // 10000
                remainder = amount % 10000
                if remainder == 0:
                    return f"{wan}‰∏áÂÖÉ"
                else:
                    return f"{wan}‰∏á{remainder}ÂÖÉ"
            return f"{amount}ÂÖÉ"
        
        full_greeting = ''.join([
            f"{customer_name}ÊÇ®Â•ΩÔºåÊàëÊòØÂπ≥ÂÆâÈì∂Ë°åÂÇ¨Êî∂‰∏ìÂëòÔºåÂ∑•Âè∑888888„ÄÇ",
            f"Ê†πÊçÆÊàëË°åËÆ∞ÂΩïÔºåÊÇ®Êúâ‰∏ÄÁ¨î{format_chinese_amount(balance)}ÁöÑÈÄæÊúüÊú¨ÈáëÔºåÈÄæÊúü‰∫Ü{days_overdue}Â§©ÔºåÂ∑≤‰∏äÊä•ÂæÅ‰ø°Á≥ªÁªü„ÄÇ",
            f"ËØ∑ÈóÆÊÇ®Áé∞Âú®Êñπ‰æøË∞àËÆ∫ËøòÊ¨æÂÆâÊéíÂêóÔºü"
        ])
        
        logger.info(f'üéØ Playing inbound greeting: "{full_greeting}"')
        
        # Update conversation history
        session['history'].append({
            'sender': 'agent',
            'text': full_greeting,
            'timestamp': time.time()
        })
        conversation_sessions[call_id] = session
        
        # Generate and play greeting TTS
        generate_telephony_tts(call_id, full_greeting)
        
    except Exception as e:
        logger.error(f'‚ùå Inbound greeting failed: {e}')

def handle_customer_speech(call_id: str, speech_text: str):
    """Handle recognized customer speech - Adapted from sendRecognizedTextToAI"""
    try:
        logger.info(f'üó£Ô∏è Customer speech recognized: "{speech_text}" (call: {call_id})')
        
        if not speech_text.strip():
            logger.info('Empty speech text, skipping processing')
            return
        
        # Mark customer response in session
        session = conversation_sessions.get(call_id, {})
        session['customer_responded'] = True
        conversation_sessions[call_id] = session
        
        # Process through LLM and generate response
        process_telephony_llm_and_tts(call_id, speech_text)
        
    except Exception as e:
        logger.error(f'‚ùå Customer speech handling failed: {e}')

def handle_call_end(call_id: str):
    """Clean up call session when call ends"""
    try:
        logger.info(f'üìû Ending call: {call_id}')
        
        # Stop ASR processor
        session = conversation_sessions.get(call_id, {})
        asr_processor = session.get('asr_processor')
        if asr_processor:
            asr_processor.stop_telephony_asr()
        
        # Clean up session (but keep for debugging if needed)
        if call_id in conversation_sessions:
            logger.info(f'üóÇÔ∏è Call session ended: {len(session.get("history", []))} conversation turns')
            # Keep session for now - in production might save to external storage
            # del conversation_sessions[call_id]
        
    except Exception as e:
        logger.error(f'‚ùå Call cleanup failed: {e}')

# Function Compute entry point
def handler(event, context):
    """Function Compute main handler - Entry point for CCC events"""
    try:
        logger.info(f'üì° Function Compute handler called: {event}')
        logger.debug(f'üì° Function Compute context: {context}')  # Log context for debugging
        
        # Initialize persistent connections if not already done
        if not asr_session and not llm_client:
            initialize_persistent_connections()
        
        # Parse CCC event
        event_type = event.get('event_type')
        call_data = event.get('call_data', {})
        
        if event_type == 'inbound_call':
            return handle_inbound_call(call_data)
        elif event_type == 'audio_data':
            # Handle incoming audio from customer
            call_id = call_data.get('call_id')
            audio_data = call_data.get('audio_data')  # G.711 encoded
            
            session = conversation_sessions.get(call_id, {})
            asr_processor = session.get('asr_processor')
            if asr_processor:
                asr_processor.send_audio_data(base64.b64decode(audio_data))
            
            return {'status': 'success', 'message': 'Audio processed'}
        elif event_type == 'call_end':
            call_id = call_data.get('call_id')
            handle_call_end(call_id)
            return {'status': 'success', 'message': 'Call ended'}
        else:
            logger.warning(f'Unknown event type: {event_type}')
            return {'status': 'error', 'message': f'Unknown event type: {event_type}'}
        
    except Exception as e:
        logger.error(f'‚ùå Function Compute handler failed: {e}')
        import traceback
        traceback.print_exc()
        return {'status': 'error', 'message': str(e)}

# Development/testing entry point
if __name__ == '__main__':
    logger.info("üöÄ CCC Consolidated Server - Development Mode")
    logger.info("üéØ Features: Inbound calls, G.711‚ÜîPCM conversion, Persistent connections")
    logger.info("üìû Architecture: No concurrency, In-memory sessions, Auto-greeting")
    
    # Initialize persistent connections
    initialize_persistent_connections()
    
    # Test with sample call event
    test_event = {
        'event_type': 'inbound_call',
        'call_data': {
            'call_id': 'test_call_001',
            'customer_phone': '+86138xxxxxxxx'
        }
    }
    
    test_context = {}  # Mock context for local testing
    
    logger.info('üß™ Testing with sample inbound call...')
    result = handler(test_event, test_context)
    logger.info(f'‚úÖ Test result: {result}')